Socket {
  nsp:
   Namespace {
     name: '/',
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Circular],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     sockets: { WJDKWFoQdGkjYYsYAAAA: [Circular] },
     connected: { WJDKWFoQdGkjYYsYAAAA: [Circular] },
     fns: [],
     ids: 0,
     rooms: [],
     flags: {},
     adapter:
      Adapter {
        nsp: [Circular],
        rooms: [Object],
        sids: [Object],
        encoder: Encoder {} },
     _events: { connect: [Function] },
     _eventsCount: 1 },
  server:
   Server {
     nsps: { '/': [Object] },
     _path: '/socket.io',
     _serveClient: true,
     parser:
      { protocol: 4,
        types: [Array],
        CONNECT: 0,
        DISCONNECT: 1,
        EVENT: 2,
        ACK: 3,
        ERROR: 4,
        BINARY_EVENT: 5,
        BINARY_ACK: 6,
        Encoder: [Function: Encoder],
        Decoder: [Function: Decoder] },
     encoder: Encoder {},
     _adapter: [Function: Adapter],
     _origins: '*:*',
     sockets:
      Namespace {
        name: '/',
        server: [Circular],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Object],
        _events: [Object],
        _eventsCount: 1 },
     eio:
      Server {
        clients: [Object],
        clientsCount: 1,
        wsEngine: 'ws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     httpServer:
      Server {
        domain: null,
        _events: [Object],
        _eventsCount: 5,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [Object],
        _usingSlaves: false,
        _slaves: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        _pendingResponseData: 0,
        maxHeadersCount: null,
        _connectionKey: '6::::3032',
        [Symbol(asyncId)]: 6 },
     engine:
      Server {
        clients: [Object],
        clientsCount: 1,
        wsEngine: 'ws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 } },
  adapter:
   Adapter {
     nsp:
      Namespace {
        name: '/',
        server: [Object],
        sockets: [Object],
        connected: [Object],
        fns: [],
        ids: 0,
        rooms: [],
        flags: {},
        adapter: [Circular],
        _events: [Object],
        _eventsCount: 1 },
     rooms: { WJDKWFoQdGkjYYsYAAAA: [Object] },
     sids: { WJDKWFoQdGkjYYsYAAAA: [Object] },
     encoder: Encoder {} },
  id: 'WJDKWFoQdGkjYYsYAAAA',
  client:
   Client {
     server:
      Server {
        nsps: [Object],
        _path: '/socket.io',
        _serveClient: true,
        parser: [Object],
        encoder: Encoder {},
        _adapter: [Function: Adapter],
        _origins: '*:*',
        sockets: [Object],
        eio: [Object],
        httpServer: [Object],
        engine: [Object] },
     conn:
      Socket {
        id: 'WJDKWFoQdGkjYYsYAAAA',
        server: [Object],
        upgrading: false,
        upgraded: false,
        readyState: 'open',
        writeBuffer: [],
        packetsFn: [],
        sentCallbackFn: [],
        cleanupFn: [Array],
        request: [Object],
        remoteAddress: '::1',
        checkIntervalTimer: null,
        upgradeTimeoutTimer: null,
        pingTimeoutTimer: [Object],
        transport: [Object],
        _events: [Object],
        _eventsCount: 3 },
     encoder: Encoder {},
     decoder: Decoder { reconstructor: null, _callbacks: [Object] },
     id: 'WJDKWFoQdGkjYYsYAAAA',
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: true,
        url: '/socket.io/?EIO=3&transport=websocket',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        parser: null,
        _query: [Object],
        websocket: [Object] },
     onclose: [Function: bound ],
     ondata: [Function: bound ],
     onerror: [Function: bound ],
     ondecoded: [Function: bound ],
     sockets: { WJDKWFoQdGkjYYsYAAAA: [Circular] },
     nsps: { '/': [Circular] },
     connectBuffer: [] },
  conn:
   Socket {
     id: 'WJDKWFoQdGkjYYsYAAAA',
     server:
      Server {
        clients: [Object],
        clientsCount: 1,
        wsEngine: 'ws',
        pingTimeout: 60000,
        pingInterval: 25000,
        upgradeTimeout: 10000,
        maxHttpBufferSize: 100000000,
        transports: [Array],
        allowUpgrades: true,
        allowRequest: [Function: bound ],
        cookie: 'io',
        cookiePath: '/',
        cookieHttpOnly: true,
        perMessageDeflate: [Object],
        httpCompression: [Object],
        initialPacket: [Array],
        ws: [Object],
        _events: [Object],
        _eventsCount: 1 },
     upgrading: false,
     upgraded: false,
     readyState: 'open',
     writeBuffer: [],
     packetsFn: [],
     sentCallbackFn: [],
     cleanupFn: [ [Function], [Function] ],
     request:
      IncomingMessage {
        _readableState: [Object],
        readable: true,
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        socket: [Object],
        connection: [Object],
        httpVersionMajor: 1,
        httpVersionMinor: 1,
        httpVersion: '1.1',
        complete: true,
        headers: [Object],
        rawHeaders: [Array],
        trailers: {},
        rawTrailers: [],
        upgrade: true,
        url: '/socket.io/?EIO=3&transport=websocket',
        method: 'GET',
        statusCode: null,
        statusMessage: null,
        client: [Object],
        _consuming: false,
        _dumped: false,
        parser: null,
        _query: [Object],
        websocket: [Object] },
     remoteAddress: '::1',
     checkIntervalTimer: null,
     upgradeTimeoutTimer: null,
     pingTimeoutTimer:
      Timeout {
        _called: false,
        _idleTimeout: 85000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 169361,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(asyncId)]: 21,
        [Symbol(triggerAsyncId)]: 13 },
     transport:
      WebSocket {
        readyState: 'open',
        discarded: false,
        socket: [Object],
        writable: false,
        perMessageDeflate: [Object],
        supportsBinary: true,
        _events: [Object],
        _eventsCount: 5,
        sid: 'WJDKWFoQdGkjYYsYAAAA',
        req: [Object] },
     _events:
      { close: [Array],
        data: [Function: bound ],
        error: [Function: bound ] },
     _eventsCount: 3 },
  rooms: {},
  acks: {},
  connected: true,
  disconnected: false,
  handshake:
   { headers:
      { host: 'localhost:3032',
        'user-agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0',
        accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'accept-language': 'en-US,en;q=0.5',
        'accept-encoding': 'gzip, deflate',
        'sec-websocket-version': '13',
        origin: 'http://localhost:8080',
        'sec-websocket-extensions': 'permessage-deflate',
        'sec-websocket-key': 'ieekI9k0MFdKbNNOB/k6Yg==',
        connection: 'keep-alive, Upgrade',
        pragma: 'no-cache',
        'cache-control': 'no-cache',
        upgrade: 'websocket' },
     time: 'Tue Dec 05 2017 09:47:03 GMT+0100 (CET)',
     address: '::1',
     xdomain: true,
     secure: false,
     issued: 1512463623410,
     url: '/socket.io/?EIO=3&transport=websocket',
     query: { EIO: '3', transport: 'websocket' } },
  fns: [],
  flags: {},
  _rooms: [] }



  Client {
    server:
     Server {
       nsps: { '/': [Object] },
       _path: '/socket.io',
       _serveClient: true,
       parser:
        { protocol: 4,
          types: [Array],
          CONNECT: 0,
          DISCONNECT: 1,
          EVENT: 2,
          ACK: 3,
          ERROR: 4,
          BINARY_EVENT: 5,
          BINARY_ACK: 6,
          Encoder: [Function: Encoder],
          Decoder: [Function: Decoder] },
       encoder: Encoder {},
       _adapter: [Function: Adapter],
       _origins: '*:*',
       sockets:
        Namespace {
          name: '/',
          server: [Circular],
          sockets: [Object],
          connected: [Object],
          fns: [],
          ids: 0,
          rooms: [],
          flags: {},
          adapter: [Object],
          _events: [Object],
          _eventsCount: 1 },
       eio:
        Server {
          clients: [Object],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 60000,
          pingInterval: 25000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array],
          allowUpgrades: true,
          allowRequest: [Function: bound ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object],
          httpCompression: [Object],
          initialPacket: [Array],
          ws: [Object],
          _events: [Object],
          _eventsCount: 1 },
       httpServer:
        Server {
          domain: null,
          _events: [Object],
          _eventsCount: 5,
          _maxListeners: undefined,
          _connections: 1,
          _handle: [Object],
          _usingSlaves: false,
          _slaves: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6::::3032',
          [Symbol(asyncId)]: 6 },
       engine:
        Server {
          clients: [Object],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 60000,
          pingInterval: 25000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array],
          allowUpgrades: true,
          allowRequest: [Function: bound ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object],
          httpCompression: [Object],
          initialPacket: [Array],
          ws: [Object],
          _events: [Object],
          _eventsCount: 1 } },
    conn:
     Socket {
       id: 'OoIpF3j4GhiMj4bkAAAA',
       server:
        Server {
          clients: [Object],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 60000,
          pingInterval: 25000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array],
          allowUpgrades: true,
          allowRequest: [Function: bound ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object],
          httpCompression: [Object],
          initialPacket: [Array],
          ws: [Object],
          _events: [Object],
          _eventsCount: 1 },
       upgrading: false,
       upgraded: false,
       readyState: 'open',
       writeBuffer: [],
       packetsFn: [],
       sentCallbackFn: [],
       cleanupFn: [ [Function], [Function] ],
       request:
        IncomingMessage {
          _readableState: [Object],
          readable: true,
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          socket: [Object],
          connection: [Object],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: [Object],
          rawHeaders: [Array],
          trailers: {},
          rawTrailers: [],
          upgrade: true,
          url: '/socket.io/?EIO=3&transport=websocket',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Object],
          _consuming: false,
          _dumped: false,
          parser: null,
          _query: [Object],
          websocket: [Object] },
       remoteAddress: '::1',
       checkIntervalTimer: null,
       upgradeTimeoutTimer: null,
       pingTimeoutTimer:
        Timeout {
          _called: false,
          _idleTimeout: 85000,
          _idlePrev: [Object],
          _idleNext: [Object],
          _idleStart: 28460,
          _onTimeout: [Function],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(asyncId)]: 21,
          [Symbol(triggerAsyncId)]: 13 },
       transport:
        WebSocket {
          readyState: 'open',
          discarded: false,
          socket: [Object],
          writable: false,
          perMessageDeflate: [Object],
          supportsBinary: true,
          _events: [Object],
          _eventsCount: 5,
          sid: 'OoIpF3j4GhiMj4bkAAAA',
          req: [Object] },
       _events:
        { close: [Array],
          data: [Function: bound ],
          error: [Function: bound ] },
       _eventsCount: 3 },
    encoder: Encoder {},
    decoder: Decoder { reconstructor: null, _callbacks: { '$decoded': [Array] } },
    id: 'OoIpF3j4GhiMj4bkAAAA',
    request:
     IncomingMessage {
       _readableState:
        ReadableState {
          objectMode: false,
          highWaterMark: 16384,
          buffer: [Object],
          length: 0,
          pipes: null,
          pipesCount: 0,
          flowing: null,
          ended: true,
          endEmitted: false,
          reading: false,
          sync: true,
          needReadable: false,
          emittedReadable: true,
          readableListening: false,
          resumeScheduled: false,
          destroyed: false,
          defaultEncoding: 'utf8',
          awaitDrain: 0,
          readingMore: true,
          decoder: null,
          encoding: null },
       readable: true,
       domain: null,
       _events: {},
       _eventsCount: 0,
       _maxListeners: undefined,
       socket:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [Object],
          _parent: null,
          _host: null,
          _readableState: [Object],
          readable: true,
          domain: null,
          _events: [Object],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [Object],
          writable: true,
          allowHalfOpen: true,
          _bytesDispatched: 267,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Object],
          _server: [Object],
          _idleTimeout: -1,
          _idleNext: null,
          _idlePrev: null,
          _idleStart: 28455,
          _destroyed: false,
          parser: null,
          on: [Function],
          _paused: false,
          read: [Function],
          _consuming: true,
          _peername: [Object],
          [Symbol(asyncId)]: 9,
          [Symbol(bytesRead)]: 0,
          [Symbol(asyncId)]: 11,
          [Symbol(triggerAsyncId)]: 6 },
       connection:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [Object],
          _parent: null,
          _host: null,
          _readableState: [Object],
          readable: true,
          domain: null,
          _events: [Object],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [Object],
          writable: true,
          allowHalfOpen: true,
          _bytesDispatched: 267,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Object],
          _server: [Object],
          _idleTimeout: -1,
          _idleNext: null,
          _idlePrev: null,
          _idleStart: 28455,
          _destroyed: false,
          parser: null,
          on: [Function],
          _paused: false,
          read: [Function],
          _consuming: true,
          _peername: [Object],
          [Symbol(asyncId)]: 9,
          [Symbol(bytesRead)]: 0,
          [Symbol(asyncId)]: 11,
          [Symbol(triggerAsyncId)]: 6 },
       httpVersionMajor: 1,
       httpVersionMinor: 1,
       httpVersion: '1.1',
       complete: true,
       headers:
        { host: 'localhost:3032',
          'user-agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0',
          accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'accept-language': 'en-US,en;q=0.5',
          'accept-encoding': 'gzip, deflate',
          'sec-websocket-version': '13',
          origin: 'http://localhost:8080',
          'sec-websocket-extensions': 'permessage-deflate',
          'sec-websocket-key': 'SBkEKBHckcVrNjBCG8SqGw==',
          connection: 'keep-alive, Upgrade',
          pragma: 'no-cache',
          'cache-control': 'no-cache',
          upgrade: 'websocket' },
       rawHeaders:
        [ 'Host',
          'localhost:3032',
          'User-Agent',
          'Mozilla/5.0 (X11; Linux x86_64; rv:57.0) Gecko/20100101 Firefox/57.0',
          'Accept',
          'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
          'Accept-Language',
          'en-US,en;q=0.5',
          'Accept-Encoding',
          'gzip, deflate',
          'Sec-WebSocket-Version',
          '13',
          'Origin',
          'http://localhost:8080',
          'Sec-WebSocket-Extensions',
          'permessage-deflate',
          'Sec-WebSocket-Key',
          'SBkEKBHckcVrNjBCG8SqGw==',
          'Connection',
          'keep-alive, Upgrade',
          'Pragma',
          'no-cache',
          'Cache-Control',
          'no-cache',
          'Upgrade',
          'websocket' ],
       trailers: {},
       rawTrailers: [],
       upgrade: true,
       url: '/socket.io/?EIO=3&transport=websocket',
       method: 'GET',
       statusCode: null,
       statusMessage: null,
       client:
        Socket {
          connecting: false,
          _hadError: false,
          _handle: [Object],
          _parent: null,
          _host: null,
          _readableState: [Object],
          readable: true,
          domain: null,
          _events: [Object],
          _eventsCount: 7,
          _maxListeners: undefined,
          _writableState: [Object],
          writable: true,
          allowHalfOpen: true,
          _bytesDispatched: 267,
          _sockname: null,
          _pendingData: null,
          _pendingEncoding: '',
          server: [Object],
          _server: [Object],
          _idleTimeout: -1,
          _idleNext: null,
          _idlePrev: null,
          _idleStart: 28455,
          _destroyed: false,
          parser: null,
          on: [Function],
          _paused: false,
          read: [Function],
          _consuming: true,
          _peername: [Object],
          [Symbol(asyncId)]: 9,
          [Symbol(bytesRead)]: 0,
          [Symbol(asyncId)]: 11,
          [Symbol(triggerAsyncId)]: 6 },
       _consuming: false,
       _dumped: false,
       parser: null,
       _query: { EIO: '3', transport: 'websocket' },
       websocket:
        WebSocket {
          domain: null,
          _events: [Object],
          _eventsCount: 4,
          _maxListeners: undefined,
          readyState: 1,
          bytesReceived: 0,
          extensions: [Object],
          protocol: '',
          _binaryType: 'nodebuffer',
          _finalize: [Object],
          _finalizeCalled: false,
          _closeMessage: null,
          _closeTimer: null,
          _closeCode: null,
          _receiver: [Object],
          _sender: [Object],
          _socket: [Object],
          _ultron: [Object],
          protocolVersion: 13,
          _maxPayload: 100000000,
          _isServer: true } },
    onclose: [Function: bound ],
    ondata: [Function: bound ],
    onerror: [Function: bound ],
    ondecoded: [Function: bound ],
    sockets:
     { OoIpF3j4GhiMj4bkAAAA:
        Socket {
          nsp: [Object],
          server: [Object],
          adapter: [Object],
          id: 'OoIpF3j4GhiMj4bkAAAA',
          client: [Circular],
          conn: [Object],
          rooms: {},
          acks: {},
          connected: true,
          disconnected: false,
          handshake: [Object],
          fns: [],
          flags: {},
          _rooms: [] } },
    nsps:
     { '/':
        Socket {
          nsp: [Object],
          server: [Object],
          adapter: [Object],
          id: 'OoIpF3j4GhiMj4bkAAAA',
          client: [Circular],
          conn: [Object],
          rooms: {},
          acks: {},
          connected: true,
          disconnected: false,
          handshake: [Object],
          fns: [],
          flags: {},
          _rooms: [] } },
    connectBuffer: [] }
